# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: action on pull request

on:
  pull_request:
    branches: [ "main", "development"]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install coverage   
        pip install sphinx
        pip install sphinx_rtd_theme
        pip install mypy     
        pip install .

    - name: SonarCloud
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
    - name: Test with pytest
      run: |
        coverage run --branch --source=bom_analysis -m pytest -v tests || true
        coverage xml -o coverage-pytest.xml
        mkdir .coverage-reports/
        cp coverage-pytest.xml .coverage-reports/test-coverage-pytest.xml
        pytest -v -o junit_family=xunit1 --junitxml=.coverage-reports/test-results.xml tests
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results
        path: .coverage-reports/test-results.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: test-coverage
        path: .coverage-reports/test-coverage-pytest.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}  
    - name: Run mypy
      run: |
        mypy ./bom_analysis
    - name: Test documentation build
      run: |
        sphinx-apidoc -f -o docs/source/ bom_analysis/
        cd docs/
        make html
        cd ..
